stages:
- build
- test
- release
- deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_REGISTRY: ${CI_REGISTRY}
  CONTAINER_IMAGE_BASE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
  CONTAINER_IMAGE_BASE_LATEST: ${CI_REGISTRY_IMAGE}:latest
  CONTAINER_IMAGE_RELEASE: ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}-apache
  CONTAINER_IMAGE_RELEASE_LATEST: ${CI_REGISTRY_IMAGE}:latest-apache
  PLAYBOOK_REPO_URL: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.dhe.duke.edu/gcb-informatics/gcb-ansible-cd.git
  PLAYBOOK_DIR: gcb-ansible-cd
  DEPLOY_PLAYBOOK: d4s2-webapp.yml
  DEPLOY_HOST: bespin-float-70.genome.duke.edu
  DEPLOY_USER: ubuntu
  DEPLOY_KEY: /home/gitlab-runner/.ssh/bespin-gitlab-runner-deploy-id_rsa
  GIT_CRYPT_KEY: /home/gitlab-runner/.git-crypt/gcb-ansible-cd-git-crypt.key
  COMPOSE_FILE: docker-compose.test.yml

# The gitlab runner environment will have CI_JOB_TOKEN set, which can be used as the
# docker password for the GitLab container registry
before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $DOCKER_REGISTRY

# Build docker images. Always build the base image before the apache image
# Pushes back to the repo in case subsequent step runs on different host
build:
  stage: build
  tags:
  - docker-build
  script:
  - docker build -t $CONTAINER_IMAGE_BASE .
  - docker build --build-arg BASE_IMAGE=${CONTAINER_IMAGE_BASE} -t $CONTAINER_IMAGE_RELEASE production
  - docker push $CONTAINER_IMAGE_BASE
  - docker push $CONTAINER_IMAGE_RELEASE

# Test the code inside the built docker image using docker-compose
test:
  stage: test
  tags:
  - docker-build
  script:
  - docker-compose up -d
  - docker-compose run web python manage.py test
  - docker-compose down

# Tag built docker images. Pulls from repo and pushes back in case running on a different host than build
# Only release from deploy branches
release-image:
  stage: release
  tags:
  - docker-build
  script:
  - docker pull $CONTAINER_IMAGE_BASE
  - docker pull $CONTAINER_IMAGE_RELEASE
  - docker tag $CONTAINER_IMAGE_BASE $CONTAINER_IMAGE_BASE_LATEST
  - docker tag $CONTAINER_IMAGE_RELEASE $CONTAINER_IMAGE_RELEASE_LATEST
  - docker push $CONTAINER_IMAGE_BASE_LATEST
  - docker push $CONTAINER_IMAGE_RELEASE_LATEST
  only:
  - deploy-dev
  - deploy-prod

# Deploy images using ansible-playbook
# Clones the private gcb-ansible-cd playbook from GitLab that uses public roles submodule
# Passes in docker registry credentials as ansible extra variables
# Requires that ansible has already been installed on the gitlab runner host, and that the
# SSH private key (DEPLOY_KEY) can login and sudo all
# Also requires the symmetric git-crypt key to be placed on the gitlab runner (GIT_CRYPT_KEY)
deploy-dev:
  stage: deploy
  tags:
  - docker-build
  script:
  - ./gitlab-deploy.sh
  environment:
    name: development
  only:
  - deploy-dev

deploy-prod:
  stage: deploy
  tags:
  - docker-build
  script:
  - ./gitlab-deploy.sh
  environment:
    name: production
  only:
  - deploy-prod
